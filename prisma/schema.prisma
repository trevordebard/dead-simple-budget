generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model StackCategory {
  id         Int     @id @default(autoincrement())
  label      String
  stackOrder Int[]
  Stack      Stack[]
  budgetId   String
  budget     Budget? @relation(fields: [budgetId], references: [id])

  @@unique([label, budgetId])
}

model Stack {
  id              Int            @id @default(autoincrement())
  label           String
  stackCategoryId Int?           @map("stack_category_id")
  amount          Int            @default(0)
  created_at      DateTime       @default(now())
  budgetId        String
  category        StackCategory? @relation(fields: [stackCategoryId], references: [id])
  budget          Budget         @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  Transaction Transaction[]
  @@unique([label, budgetId])
}

model Transaction {
  id                 Int      @id @default(autoincrement())
  plaidTransactionId String?  @unique
  description        String
  stackId            Int?
  amount             Int
  type               String
  date               DateTime
  createdAt          DateTime @default(now()) @map("created_at")
  budgetId           String
  budget             Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  stack              Stack?   @relation(fields: [stackId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  Budget    Budget?
}

model Budget {
  id              String          @id @default(cuid())
  total           Int             @default(0)
  toBeBudgeted    Int             @default(0)
  stacks          Stack[]
  transactions    Transaction[]
  bankAccounts    BankAccout[]
  stackCategories StackCategory[]
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BankAccout {
  id               Int      @id @default(autoincrement())
  plaidAccessToken String
  plaidItemId      String   @unique
  plaidAccountIds  String[]
  budgetId         String
  budget           Budget   @relation(fields: [budgetId], references: [id])
}
