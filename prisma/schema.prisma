generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model StackCategory {
  id         Int     @id @default(autoincrement())
  category   String
  stackOrder Int[]
  Stack      Stack[]
  userId     String
  user       User?   @relation(fields: [userId], references: [id])
}

model Stack {
  id              Int            @id @default(autoincrement())
  label           String
  stackCategoryId Int?           @map("stack_category_id")
  amount          Int            @default(0)
  created_at      DateTime       @default(now())
  userId          String
  category        StackCategory? @relation(fields: [stackCategoryId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([label, userId])
}

model Transaction {
  id                 Int      @id @default(autoincrement())
  plaidTransactionId String?  @unique
  description        String
  stack              String
  amount             Int
  type               String
  userId             String
  date               DateTime
  createdAt          DateTime @default(now()) @map("created_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @default(now()) @map("updated_at")
  total           Int             @default(0)
  toBeBudgeted    Int             @default(0)
  stacks          Stack[]
  transactions    Transaction[]
  bankAccounts    BankAccout[]
  stackCategories StackCategory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BankAccout {
  id               Int      @id @default(autoincrement())
  plaidAccessToken String
  plaidItemId      String   @unique
  plaidAccountIds  String[]
  userId           String
  User             User     @relation(fields: [userId], references: [id])
}
