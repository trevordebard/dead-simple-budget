### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AffectedRowsOutput {
  count: Int!
}

input BankAccoutCreateManyUserInput {
  id: Int
  plaidAccessToken: String!
  plaidAccountIds: BankAccoutCreateManyplaidAccountIdsInput
  plaidItemId: String!
}

input BankAccoutCreateManyUserInputEnvelope {
  data: [BankAccoutCreateManyUserInput!]
  skipDuplicates: Boolean
}

input BankAccoutCreateManyplaidAccountIdsInput {
  set: [String!]
}

input BankAccoutCreateNestedManyWithoutUserInput {
  connect: [BankAccoutWhereUniqueInput!]
  connectOrCreate: [BankAccoutCreateOrConnectWithoutUserInput!]
  create: [BankAccoutCreateWithoutUserInput!]
  createMany: BankAccoutCreateManyUserInputEnvelope
}

input BankAccoutCreateOrConnectWithoutUserInput {
  create: BankAccoutCreateWithoutUserInput!
  where: BankAccoutWhereUniqueInput!
}

input BankAccoutCreateWithoutUserInput {
  plaidAccessToken: String!
  plaidAccountIds: BankAccoutCreateplaidAccountIdsInput
  plaidItemId: String!
}

input BankAccoutCreateplaidAccountIdsInput {
  set: [String!]
}

input BankAccoutListRelationFilter {
  every: BankAccoutWhereInput
  none: BankAccoutWhereInput
  some: BankAccoutWhereInput
}

input BankAccoutScalarWhereInput {
  AND: [BankAccoutScalarWhereInput!]
  NOT: [BankAccoutScalarWhereInput!]
  OR: [BankAccoutScalarWhereInput!]
  id: IntFilter
  plaidAccessToken: StringFilter
  plaidAccountIds: StringNullableListFilter
  plaidItemId: StringFilter
  userId: IntFilter
}

input BankAccoutUpdateManyMutationInput {
  plaidAccessToken: StringFieldUpdateOperationsInput
  plaidAccountIds: BankAccoutUpdateplaidAccountIdsInput
  plaidItemId: StringFieldUpdateOperationsInput
}

input BankAccoutUpdateManyWithWhereWithoutUserInput {
  data: BankAccoutUpdateManyMutationInput!
  where: BankAccoutScalarWhereInput!
}

input BankAccoutUpdateManyWithoutUserInput {
  connect: [BankAccoutWhereUniqueInput!]
  connectOrCreate: [BankAccoutCreateOrConnectWithoutUserInput!]
  create: [BankAccoutCreateWithoutUserInput!]
  createMany: BankAccoutCreateManyUserInputEnvelope
  delete: [BankAccoutWhereUniqueInput!]
  deleteMany: [BankAccoutScalarWhereInput!]
  disconnect: [BankAccoutWhereUniqueInput!]
  set: [BankAccoutWhereUniqueInput!]
  update: [BankAccoutUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BankAccoutUpdateManyWithWhereWithoutUserInput!]
  upsert: [BankAccoutUpsertWithWhereUniqueWithoutUserInput!]
}

input BankAccoutUpdateWithWhereUniqueWithoutUserInput {
  data: BankAccoutUpdateWithoutUserInput!
  where: BankAccoutWhereUniqueInput!
}

input BankAccoutUpdateWithoutUserInput {
  plaidAccessToken: StringFieldUpdateOperationsInput
  plaidAccountIds: BankAccoutUpdateplaidAccountIdsInput
  plaidItemId: StringFieldUpdateOperationsInput
}

input BankAccoutUpdateplaidAccountIdsInput {
  push: String
  set: [String!]
}

input BankAccoutUpsertWithWhereUniqueWithoutUserInput {
  create: BankAccoutCreateWithoutUserInput!
  update: BankAccoutUpdateWithoutUserInput!
  where: BankAccoutWhereUniqueInput!
}

input BankAccoutWhereInput {
  AND: [BankAccoutWhereInput!]
  NOT: [BankAccoutWhereInput!]
  OR: [BankAccoutWhereInput!]
  id: IntFilter
  plaidAccessToken: StringFilter
  plaidAccountIds: StringNullableListFilter
  plaidItemId: StringFilter
  user: userWhereInput
  userId: IntFilter
}

input BankAccoutWhereUniqueInput {
  id: Int
  plaidItemId: String
}

type Budget {
  id: Int!
  stacks(after: StackWhereUniqueInput, before: StackWhereUniqueInput, first: Int, last: Int, orderBy: [StackOrderByInput!]): [Stack!]!
  toBeBudgeted: Float
  total: Float
  userId: Int!
}

input BudgetCreateInput {
  createdAt: DateTime
  stacks: StackCreateNestedManyWithoutBudgetInput
  toBeBudgeted: Float
  total: Float
  user: userCreateNestedOneWithoutBudgetInput!
}

input BudgetCreateNestedOneWithoutStacksInput {
  connect: BudgetWhereUniqueInput
  connectOrCreate: BudgetCreateOrConnectWithoutStacksInput
  create: BudgetCreateWithoutStacksInput
}

input BudgetCreateNestedOneWithoutUserInput {
  connect: BudgetWhereUniqueInput
  connectOrCreate: BudgetCreateOrConnectWithoutUserInput
  create: BudgetCreateWithoutUserInput
}

input BudgetCreateOrConnectWithoutStacksInput {
  create: BudgetCreateWithoutStacksInput!
  where: BudgetWhereUniqueInput!
}

input BudgetCreateOrConnectWithoutUserInput {
  create: BudgetCreateWithoutUserInput!
  where: BudgetWhereUniqueInput!
}

input BudgetCreateWithoutStacksInput {
  createdAt: DateTime
  toBeBudgeted: Float
  total: Float
  user: userCreateNestedOneWithoutBudgetInput!
}

input BudgetCreateWithoutUserInput {
  createdAt: DateTime
  stacks: StackCreateNestedManyWithoutBudgetInput
  toBeBudgeted: Float
  total: Float
}

input BudgetUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  stacks: StackUpdateManyWithoutBudgetInput
  toBeBudgeted: NullableFloatFieldUpdateOperationsInput
  total: NullableFloatFieldUpdateOperationsInput
  user: userUpdateOneRequiredWithoutBudgetInput
}

input BudgetUpdateOneRequiredWithoutStacksInput {
  connect: BudgetWhereUniqueInput
  connectOrCreate: BudgetCreateOrConnectWithoutStacksInput
  create: BudgetCreateWithoutStacksInput
  update: BudgetUpdateWithoutStacksInput
  upsert: BudgetUpsertWithoutStacksInput
}

input BudgetUpdateOneWithoutUserInput {
  connect: BudgetWhereUniqueInput
  connectOrCreate: BudgetCreateOrConnectWithoutUserInput
  create: BudgetCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: BudgetUpdateWithoutUserInput
  upsert: BudgetUpsertWithoutUserInput
}

input BudgetUpdateWithoutStacksInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  toBeBudgeted: NullableFloatFieldUpdateOperationsInput
  total: NullableFloatFieldUpdateOperationsInput
  user: userUpdateOneRequiredWithoutBudgetInput
}

input BudgetUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  stacks: StackUpdateManyWithoutBudgetInput
  toBeBudgeted: NullableFloatFieldUpdateOperationsInput
  total: NullableFloatFieldUpdateOperationsInput
}

input BudgetUpsertWithoutStacksInput {
  create: BudgetCreateWithoutStacksInput!
  update: BudgetUpdateWithoutStacksInput!
}

input BudgetUpsertWithoutUserInput {
  create: BudgetCreateWithoutUserInput!
  update: BudgetUpdateWithoutUserInput!
}

input BudgetWhereInput {
  AND: [BudgetWhereInput!]
  NOT: [BudgetWhereInput!]
  OR: [BudgetWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  stacks: StackListRelationFilter
  toBeBudgeted: FloatNullableFilter
  total: FloatNullableFilter
  user: userWhereInput
  userId: IntFilter
}

input BudgetWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOneBudget(data: BudgetCreateInput!): Budget!
  createOneStack(data: StackCreateInput!): Stack!
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  createOneuser(data: userCreateInput!): user!
  deleteManyTransaction(where: TransactionWhereInput): AffectedRowsOutput!
  deleteOneStack(where: StackWhereUniqueInput!): Stack
  updateOneBudget(data: BudgetUpdateInput!, where: BudgetWhereUniqueInput!): Budget
  updateOneStack(data: StackUpdateInput!, where: StackWhereUniqueInput!): Stack
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  uploadFile(file: Upload): UploadFile
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  budget(where: BudgetWhereUniqueInput!): Budget
  budgets(after: BudgetWhereUniqueInput, before: BudgetWhereUniqueInput, first: Int, last: Int, where: QueryBudgetsWhereInput): [Budget!]!
  stacks(after: StackWhereUniqueInput, before: StackWhereUniqueInput, first: Int, last: Int, where: QueryStacksWhereInput): [Stack!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int, orderBy: [QueryTransactionsOrderByInput!], where: QueryTransactionsWhereInput): [Transaction!]!
  user(where: userWhereUniqueInput!): user
}

input QueryBudgetsWhereInput {
  user: userWhereInput
  userId: IntFilter
}

enum QueryMode {
  default
  insensitive
}

input QueryStacksWhereInput {
  id: IntFilter
}

input QueryTransactionsOrderByInput {
  date: SortOrder
}

input QueryTransactionsWhereInput {
  user: userWhereInput
  userId: IntFilter
}

enum SortOrder {
  asc
  desc
}

type Stack {
  amount: Float!
  budgetId: Int!
  created_at: DateTime!
  id: Int!
  label: String!
}

input StackBudgetId_label_idxCompoundUniqueInput {
  budgetId: Int!
  label: String!
}

input StackCreateInput {
  amount: Float
  budget: BudgetCreateNestedOneWithoutStacksInput!
  created_at: DateTime
  label: String!
}

input StackCreateManyBudgetInput {
  amount: Float
  created_at: DateTime
  id: Int
  label: String!
}

input StackCreateManyBudgetInputEnvelope {
  data: [StackCreateManyBudgetInput!]
  skipDuplicates: Boolean
}

input StackCreateNestedManyWithoutBudgetInput {
  connect: [StackWhereUniqueInput!]
  connectOrCreate: [StackCreateOrConnectWithoutBudgetInput!]
  create: [StackCreateWithoutBudgetInput!]
  createMany: StackCreateManyBudgetInputEnvelope
}

input StackCreateOrConnectWithoutBudgetInput {
  create: StackCreateWithoutBudgetInput!
  where: StackWhereUniqueInput!
}

input StackCreateWithoutBudgetInput {
  amount: Float
  created_at: DateTime
  label: String!
}

input StackListRelationFilter {
  every: StackWhereInput
  none: StackWhereInput
  some: StackWhereInput
}

input StackOrderByInput {
  amount: SortOrder
  budgetId: SortOrder
  created_at: SortOrder
  id: SortOrder
  label: SortOrder
}

input StackScalarWhereInput {
  AND: [StackScalarWhereInput!]
  NOT: [StackScalarWhereInput!]
  OR: [StackScalarWhereInput!]
  amount: FloatFilter
  budgetId: IntFilter
  created_at: DateTimeFilter
  id: IntFilter
  label: StringFilter
}

input StackUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  budget: BudgetUpdateOneRequiredWithoutStacksInput
  created_at: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
}

input StackUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
}

input StackUpdateManyWithWhereWithoutBudgetInput {
  data: StackUpdateManyMutationInput!
  where: StackScalarWhereInput!
}

input StackUpdateManyWithoutBudgetInput {
  connect: [StackWhereUniqueInput!]
  connectOrCreate: [StackCreateOrConnectWithoutBudgetInput!]
  create: [StackCreateWithoutBudgetInput!]
  createMany: StackCreateManyBudgetInputEnvelope
  delete: [StackWhereUniqueInput!]
  deleteMany: [StackScalarWhereInput!]
  disconnect: [StackWhereUniqueInput!]
  set: [StackWhereUniqueInput!]
  update: [StackUpdateWithWhereUniqueWithoutBudgetInput!]
  updateMany: [StackUpdateManyWithWhereWithoutBudgetInput!]
  upsert: [StackUpsertWithWhereUniqueWithoutBudgetInput!]
}

input StackUpdateWithWhereUniqueWithoutBudgetInput {
  data: StackUpdateWithoutBudgetInput!
  where: StackWhereUniqueInput!
}

input StackUpdateWithoutBudgetInput {
  amount: FloatFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
}

input StackUpsertWithWhereUniqueWithoutBudgetInput {
  create: StackCreateWithoutBudgetInput!
  update: StackUpdateWithoutBudgetInput!
  where: StackWhereUniqueInput!
}

input StackWhereInput {
  AND: [StackWhereInput!]
  NOT: [StackWhereInput!]
  OR: [StackWhereInput!]
  amount: FloatFilter
  budget: BudgetWhereInput
  budgetId: IntFilter
  created_at: DateTimeFilter
  id: IntFilter
  label: StringFilter
}

input StackWhereUniqueInput {
  budgetId_label_idx: StackBudgetId_label_idxCompoundUniqueInput
  id: Int
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Transaction {
  amount: Float!
  date: DateTime!
  description: String!
  id: Int!
  stack: String!
  type: String!
  userId: Int!
}

input TransactionCreateInput {
  amount: Float!
  createdAt: DateTime
  date: DateTime!
  description: String!
  stack: String!
  type: String!
  user: userCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateManyUserInput {
  amount: Float!
  createdAt: DateTime
  date: DateTime!
  description: String!
  id: Int
  stack: String!
  type: String!
}

input TransactionCreateManyUserInputEnvelope {
  data: [TransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutUserInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutUserInput!]
  create: [TransactionCreateWithoutUserInput!]
  createMany: TransactionCreateManyUserInputEnvelope
}

input TransactionCreateOrConnectWithoutUserInput {
  create: TransactionCreateWithoutUserInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutUserInput {
  amount: Float!
  createdAt: DateTime
  date: DateTime!
  description: String!
  stack: String!
  type: String!
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringFilter
  id: IntFilter
  stack: StringFilter
  type: StringFilter
  userId: IntFilter
}

input TransactionUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  stack: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  user: userUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  stack: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutUserInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutUserInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutUserInput!]
  create: [TransactionCreateWithoutUserInput!]
  createMany: TransactionCreateManyUserInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input TransactionUpdateWithWhereUniqueWithoutUserInput {
  data: TransactionUpdateWithoutUserInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutUserInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  stack: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutUserInput {
  create: TransactionCreateWithoutUserInput!
  update: TransactionUpdateWithoutUserInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringFilter
  id: IntFilter
  stack: StringFilter
  type: StringFilter
  user: userWhereInput
  userId: IntFilter
}

input TransactionWhereUniqueInput {
  id: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  filename: String
  uri: String
}

type user {
  budget: Budget
  email: String!
  id: Int!
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int): [Transaction!]!
}

input userCreateInput {
  bankAccounts: BankAccoutCreateNestedManyWithoutUserInput
  budget: BudgetCreateNestedOneWithoutUserInput
  createdAt: DateTime
  email: String!
  emailVerified: DateTime
  image: String
  name: String
  transactions: TransactionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input userCreateNestedOneWithoutBudgetInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutBudgetInput
  create: userCreateWithoutBudgetInput
}

input userCreateNestedOneWithoutTransactionsInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutTransactionsInput
  create: userCreateWithoutTransactionsInput
}

input userCreateOrConnectWithoutBudgetInput {
  create: userCreateWithoutBudgetInput!
  where: userWhereUniqueInput!
}

input userCreateOrConnectWithoutTransactionsInput {
  create: userCreateWithoutTransactionsInput!
  where: userWhereUniqueInput!
}

input userCreateWithoutBudgetInput {
  bankAccounts: BankAccoutCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  emailVerified: DateTime
  image: String
  name: String
  transactions: TransactionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input userCreateWithoutTransactionsInput {
  bankAccounts: BankAccoutCreateNestedManyWithoutUserInput
  budget: BudgetCreateNestedOneWithoutUserInput
  createdAt: DateTime
  email: String!
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
}

input userUpdateOneRequiredWithoutBudgetInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutBudgetInput
  create: userCreateWithoutBudgetInput
  update: userUpdateWithoutBudgetInput
  upsert: userUpsertWithoutBudgetInput
}

input userUpdateOneRequiredWithoutTransactionsInput {
  connect: userWhereUniqueInput
  connectOrCreate: userCreateOrConnectWithoutTransactionsInput
  create: userCreateWithoutTransactionsInput
  update: userUpdateWithoutTransactionsInput
  upsert: userUpsertWithoutTransactionsInput
}

input userUpdateWithoutBudgetInput {
  bankAccounts: BankAccoutUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input userUpdateWithoutTransactionsInput {
  bankAccounts: BankAccoutUpdateManyWithoutUserInput
  budget: BudgetUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input userUpsertWithoutBudgetInput {
  create: userCreateWithoutBudgetInput!
  update: userUpdateWithoutBudgetInput!
}

input userUpsertWithoutTransactionsInput {
  create: userCreateWithoutTransactionsInput!
  update: userUpdateWithoutTransactionsInput!
}

input userWhereInput {
  AND: [userWhereInput!]
  NOT: [userWhereInput!]
  OR: [userWhereInput!]
  bankAccounts: BankAccoutListRelationFilter
  budget: BudgetWhereInput
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
}

input userWhereUniqueInput {
  email: String
  id: Int
}
